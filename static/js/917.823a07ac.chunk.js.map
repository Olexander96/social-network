{"version":3,"file":"static/js/917.823a07ac.chunk.js","mappings":"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","sources":["webpack://1-project/./src/components/Profile/Profile.module.css?b512","webpack://1-project/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileData.jsx","components/Profile/ProfileInfo/ProfileDataEditForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://1-project/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","webpack://1-project/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/MyNewPostReduxForm.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/hoc/withAuthRedirect.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__njilw\",\"personal\":\"Profile_personal__fM1Mg\",\"info\":\"Profile_info__lhThD\"};","// extracted by mini-css-extract-plugin\nexport default {\"imageBlock\":\"ProfileInfo_imageBlock__BT9jw\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__AO4M2\",\"profileStatus\":\"ProfileInfo_profileStatus__j6o9c\",\"contactItem\":\"ProfileInfo_contactItem__AP9ai\"};","import React, { useEffect, useState } from 'react';\r\nimport pi from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n        let [editMode, setEditMode] = useState(false);\r\n        let [currentStatus, setStatus] = useState(props.status);//тобто він примає значення початкове і в результаті setStatus може його міняти\r\n        useEffect(() => {\r\n            setStatus(props.status)\r\n        }, [props.status])\r\n\r\n        const activateEditMode = () => {\r\n            setEditMode(true)\r\n        };\r\n\r\n        const deactivateEditMode = () => {\r\n            setEditMode(false); //перемикає режим редагування \r\n            props.updateUserStatus(currentStatus) //відправляє статус для запису на сервак\r\n        };\r\n\r\n        const onChangedStatus = (event) => { // коли ми пічатаємо статус то він записується в status\r\n            setStatus(event.currentTarget.value);\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                {editMode  \r\n                    ? <div>  \r\n                        <input \r\n                            autoFocus={ true } \r\n                            onBlur={ deactivateEditMode } // коли натиснув поза інпутом\r\n                            value={ currentStatus }\r\n                            onChange={ onChangedStatus }\r\n                        />\r\n                      </div>\r\n                    : <div>\r\n                        <span \r\n                            className={pi.profileStatus} \r\n                            onDoubleClick={ activateEditMode } \r\n                        >{ props.status || \"-------\"}</span>\r\n                      </div> //тут показуємо статус який прийде з стейта по API \r\n                }\r\n            </div>\r\n        )\r\n}\r\n    \r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from \"react\";\r\nimport styles from './ProfileInfo.module.css';\r\n\r\nconst ProfileData =( {profile, isOwner, activateEditMode} ) => {\r\n    return (\r\n        <div>\r\n            { isOwner ? <button onClick={ activateEditMode }>Edit</button> : null }\r\n            <div>\r\n                <span>Full name: { profile.fullName }</span>\r\n            </div>\r\n            <div>\r\n                <span>About me: { profile.aboutMe }</span>\r\n            </div>\r\n            <div>\r\n                <span>Looking for a job: { profile.lookingForAJob ? \"yes\" : \"no\" }</span>\r\n            </div>\r\n            {\r\n            profile.lookingForAJob\r\n                ? <div>\r\n                    <span>My professional skills: { profile.lookingForAJobDescription }</span>\r\n                </div> \r\n                : null\r\n            }\r\n            <div>\r\n                <span>Contacts: { Object.keys(profile.contacts).map(key => {\r\n                    return <Contact key= {key} contactTitle = {key} contactValue = {profile.contacts[key]}/>\r\n                })}</span>\r\n            </div>\r\n        </div>\r\n    ) \r\n}\r\n\r\nconst Contact = ( {contactTitle, contactValue} ) => {\r\n    return (\r\n        <div className={styles.contactItem}>{ contactTitle }: { contactValue }</div>\r\n    )\r\n}\r\n\r\nexport default ProfileData;","import React from \"react\";\r\nimport { Textarea, createField } from \"../../common/FormControls/FormControls\";\r\nimport { Input } from \"../../common/FormControls/FormControls\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport styles from './ProfileInfo.module.css';\r\nimport formStyles from \"../../common/FormControls/FormControls.module.css\";\r\n\r\nconst ProfileDataEditForm = ( {handleSubmit, profile, error, editModeStatus} ) => {\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <button >Save</button>\r\n            {error ? <div className={ formStyles.formErrorSummary }>{ error }</div> : null} \r\n            <div>\r\n                <span>Full name:</span>\r\n                { createField( Input, \"Full name\", \"fullName\", []) }\r\n            </div>\r\n            <div>\r\n                <span>About me:</span>\r\n                { createField( Textarea, \"About me\", \"aboutMe\", []) }\r\n            </div>\r\n            <div>\r\n                <span>Looking for a job:</span>\r\n                { createField( Input, \"\", \"lookingForAJob\", [], {type: \"checkbox\"}) }\r\n            </div>\r\n            <div>\r\n                <span>My professional skills:</span>\r\n                { createField( Textarea, \"My professional skills\", \"lookingForAJobDescription\", []) }\r\n            </div> \r\n            <div>\r\n                <span>Contacts: { Object.keys(profile.contacts).map(key => {\r\n                    return (\r\n                        <div className={styles.contactItem} key={key}>\r\n                            <span>{key}</span>\r\n                            { createField(Input, key, \"contacts.\" + key, []) }\r\n                        </div>\r\n                    )\r\n                })}</span>\r\n            </div>\r\n        </form>\r\n    ) \r\n}\r\n\r\nconst ProfileDataEditReduxForm = reduxForm({form: \"profile-form\"})(ProfileDataEditForm)\r\n\r\nexport default ProfileDataEditReduxForm;\r\n","import React, { useState } from 'react';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport styles from './ProfileInfo.module.css';\r\nimport userPhoto from '../../../assets/images/user.jpg';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport ProfileData from './ProfileData';\r\nimport ProfileDataEditForm from './ProfileDataEditForm';\r\n\r\n\r\nconst ProfileInfo = ( {profile, status, updateUserStatus, isOwner, savePhoto, saveProfileFormData, editModeStatus} ) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const sendPhotoToServer = (event) => {\r\n        if (event.target.files.length) {\r\n            savePhoto(event.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfileFormData(formData)\r\n        if (editModeStatus === \"SUCCESS\")  {\r\n            setEditMode(false)\r\n        }\r\n    };\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    } \r\n    return (\r\n            <div>\r\n                <div className={styles.descriptionBlock}>\r\n                    <img src = { profile.photos.large || userPhoto } alt='user-avatar'/>\r\n                    {isOwner ? <input type='file' onChange={ sendPhotoToServer }/> : null}\r\n                    <ProfileStatusWithHooks status={ status } updateUserStatus = { updateUserStatus }/>\r\n                    {editMode \r\n                        ? <ProfileDataEditForm initialValues={ profile } //initialValues це вбудована ф-ція в redux-form-state яка дозволяє передати значення які до нас прийшли в режим редагування інпута\r\n                            onSubmit={ onSubmit } \r\n                            profile = { profile }\r\n                            editModeStatus = {editModeStatus}\r\n                          /> \r\n                        : <ProfileData profile = { profile } \r\n                            isOwner = { isOwner }\r\n                            activateEditMode = {() => { setEditMode(true) }}\r\n                          />  \r\n                    }\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__wd+99\"};","import React from 'react';\r\nimport p from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={p.item}>\r\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSY4JmSLi5dZYfNLYBW-LtPGbN4W571XtNMVQ&usqp=CAU\" alt=\"avatar\"/>\r\n            <span>{props.message}</span>\r\n            <span>likes {props.likesCount}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__Tyn6L\",\"writePost\":\"MyPosts_writePost__YGPfE\",\"posts\":\"MyPosts_posts__W1RuA\"};","import React from \"react\";\r\nimport m from './MyPosts.module.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLength, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from \"../../common/FormControls/FormControls\";\r\n\r\nconst currentMaxLength  = maxLength(15); //бо на пряму не працює\r\n\r\nconst MyNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={ props.handleSubmit } className={m.writePost}>\r\n            <Field component={ Textarea } \r\n                    name={ \"newPost\" }\r\n                    validate={ [ required, currentMaxLength ] }   //всі функції які валідують\r\n                    placeholder='Post message'\r\n            />\r\n            <div>\r\n                <button>Add Post</button>\r\n                <button>Remove Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst MyNewPostReduxForm = reduxForm({form: \"post\"})(MyNewPostForm);\r\n\r\nexport default MyNewPostReduxForm;","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport m from './MyPosts.module.css';\r\nimport MyNewPostReduxForm from './MyNewPostReduxForm';\r\n\r\n\r\nconst MyPosts = (props) => {\r\n\r\n    // shouldComponentUpdate(nextProps, nextState) { // те саме що і PureComponent (аби це була класова компонента)\r\n    //     return nextProps !== this.props\r\n    // } //а для функцыональної використовуєм memo\r\n    \r\n        let postsElements = props.profilePage.posts.map(p => <Post message={p.message} key={p.id} likesCount= {p.likesCount}/>); // з кожним елементом масиву створили компоненту\r\n        \r\n        const onAddPost = (values) => {\r\n            props.addPost(values.newPost)\r\n        };\r\n\r\n        // console.log(\"RENDER\")\r\n        return (\r\n            <div className={m.postsBlock}>\r\n                <MyNewPostReduxForm onSubmit={ onAddPost } />\r\n                <div className={m.posts}>\r\n                    { postsElements }\r\n                </div>\r\n            </div>\r\n        )\r\n    \r\n};\r\n\r\n\r\nexport default React.memo(MyPosts)\r\n","import MyPosts from './MyPosts';\r\nimport { addPostCreator} from '../../../redux/profile-reducer';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPost) => {\r\n            dispatch( addPostCreator(newPost) )\r\n        }\r\n        // updateNewPostText: (text) => {\r\n        //     let action = updateNewPostTextCreator(text);\r\n        //     dispatch( action )\r\n        // }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport p from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div className={p.content}>\r\n            <ProfileInfo profile={ props.profile } \r\n                status={ props.status } \r\n                updateUserStatus = { props.updateUserStatus }\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                saveProfileFormData = {props.saveProfileFormData}\r\n                editModeStatus = {props.editModeStatus}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport { getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfileFormData } from '../../redux/profile-reducer';\r\nimport wiAuthRedirect from '../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { withRouter } from '../hoc/withRouter';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile () {\r\n        let userId = this.props.params.userId;\r\n        if (userId == null) {\r\n            userId = this.props.authorizedUserId; //мій авторизований профіль профіль\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\") //якщо нам не прийде інформація по буде профілю то редірект на логін сторінку\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId) //кріейтор санки\r\n        this.props.getUserStatus(userId)\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    };\r\n\r\n    componentDidUpdate (prevProps, prevState) {\r\n        if (this.props.params.userId !== prevProps.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Profile {...this.props} \r\n                profile={this.props.profile} \r\n                status={this.props.status} \r\n                updateUserStatus = { this.props.updateUserStatus }\r\n                isOwner = {!this.props.params.userId}\r\n                savePhoto =  { this.props.savePhoto }\r\n                saveProfileFormData = {this.props.saveProfileFormData}\r\n                editModeStatus = {this.props.editModeStatus}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n        editModeStatus: state.profilePage.editModeStatus\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfileFormData}),\r\n    withRouter,\r\n    wiAuthRedirect // HOC якщо не залогынений то редырект на вкладку login\r\n)(ProfileContainer);\r\n","import React from \"react\";\r\nimport { Navigate } from \"react-router\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nconst wiAuthRedirect = (Component) => { // HOC компонента вищого порядку для редіректа\r\n\r\n    class RedirectComponent extends React.Component {\r\n\r\n        render () {\r\n            if (!this.props.isAuth) return <Navigate to=\"/login\"/>//якщо не залогынений то редырект на вкладку login\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent); // для то щоб this.props.isAuth прокинути в цю компоненту\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\nexport default wiAuthRedirect;"],"names":["props","useState","editMode","setEditMode","status","currentStatus","setStatus","useEffect","autoFocus","onBlur","updateUserStatus","value","onChange","event","currentTarget","className","pi","onDoubleClick","Contact","_ref2","contactTitle","contactValue","_jsxs","styles","children","_ref","profile","isOwner","activateEditMode","_jsx","onClick","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","map","key","reduxForm","form","handleSubmit","error","editModeStatus","onSubmit","formStyles","createField","Input","Textarea","type","savePhoto","saveProfileFormData","_useState","_useState2","_slicedToArray","src","photos","large","userPhoto","alt","target","files","length","ProfileStatusWithHooks","ProfileDataEditForm","initialValues","formData","ProfileData","Preloader","p","message","likesCount","currentMaxLength","maxLength","m","Field","component","name","validate","required","placeholder","MyPosts","postsElements","profilePage","posts","Post","id","MyNewPostReduxForm","values","addPost","newPost","React","connect","state","dispatch","addPostCreator","ProfileInfo","MyPostsContainer","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","userId","this","params","authorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","Profile","_objectSpread","compose","auth","isAuth","withRouter","wiAuthRedirect","mapStateToPropsForRedirect","Component","RedirectComponent","to"],"sourceRoot":""}