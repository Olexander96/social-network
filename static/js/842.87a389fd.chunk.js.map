{"version":3,"file":"static/js/842.87a389fd.chunk.js","mappings":"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","sources":["webpack://1-project/./src/components/Profile/Profile.module.css?b512","webpack://1-project/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","webpack://1-project/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.jsx","webpack://1-project/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/MyNewPostReduxForm.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","components/hoc/withAuthRedirect.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__njilw\",\"personal\":\"Profile_personal__fM1Mg\",\"info\":\"Profile_info__lhThD\"};","// extracted by mini-css-extract-plugin\nexport default {\"imageBlock\":\"ProfileInfo_imageBlock__BT9jw\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__AO4M2\",\"profileStatus\":\"ProfileInfo_profileStatus__j6o9c\"};","import React, { useEffect, useState } from 'react';\r\nimport pi from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n        let [editMode, setEditMode] = useState(false);\r\n        let [currentStatus, setStatus] = useState(props.status);//тобто він примає значення початкове і в результаті setStatus може його міняти\r\n        useEffect(() => {\r\n            setStatus(props.status)\r\n        }, [props.status])\r\n\r\n        const activateEditMode = () => {\r\n            setEditMode(true)\r\n        };\r\n\r\n        const deactivateEditMode = () => {\r\n            setEditMode(false); //перемикає режим редагування \r\n            props.updateUserStatus(currentStatus) //відправляє статус для запису на сервак\r\n        };\r\n\r\n        const onChangedStatus = (event) => { // коли ми пічатаємо статус то він записується в status\r\n            setStatus(event.currentTarget.value);\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                {editMode  \r\n                    ? <div>  \r\n                        <input \r\n                            autoFocus={ true } \r\n                            onBlur={ deactivateEditMode } // коли натиснув поза інпутом\r\n                            value={ currentStatus }\r\n                            onChange={ onChangedStatus }\r\n                        />\r\n                      </div>\r\n                    : <div>\r\n                        <span \r\n                            className={pi.profileStatus} \r\n                            onDoubleClick={ activateEditMode } \r\n                        >{ props.status || \"-------\"}</span>\r\n                      </div> //тут показуємо статус який прийде з стейта по API \r\n                }\r\n            </div>\r\n        )\r\n}\r\n    \r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport pi from './ProfileInfo.module.css';\r\nimport userPhoto from '../../../assets/images/user.jpg';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\n\r\nconst ProfileInfo = ( {profile, status, updateUserStatus, isOwner, savePhoto} ) => {\r\n\r\n    const sendPhotoToServer = (event) => {\r\n        if (event.target.files.length) {\r\n            savePhoto(event.target.files[0]);\r\n        }\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    } \r\n    return (\r\n            <div>\r\n                <div className={pi.descriptionBlock}>\r\n                    <img src = { profile.photos.large || userPhoto } alt='user-avatar'/>\r\n                    {isOwner ? <input type='file' onChange={ sendPhotoToServer }/> : null}\r\n                    <div>\r\n                        <span>{ profile.fullName }</span>\r\n                    </div>\r\n                    <ProfileStatusWithHooks status={ status } updateUserStatus = { updateUserStatus }/>\r\n                    <div>\r\n                        <span>{ profile.aboutMe }</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default ProfileInfo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__wd+99\"};","import React from 'react';\r\nimport p from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={p.item}>\r\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSY4JmSLi5dZYfNLYBW-LtPGbN4W571XtNMVQ&usqp=CAU\" alt=\"avatar\"/>\r\n            <span>{props.message}</span>\r\n            <span>likes {props.likesCount}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__Tyn6L\",\"writePost\":\"MyPosts_writePost__YGPfE\",\"posts\":\"MyPosts_posts__W1RuA\"};","import React from \"react\";\r\nimport m from './MyPosts.module.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLength, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from \"../../common/FormControls/FormControls\";\r\n\r\nconst currentMaxLength  = maxLength(15); //бо на пряму не працює\r\n\r\nconst MyNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={ props.handleSubmit } className={m.writePost}>\r\n            <Field component={ Textarea } \r\n                    name={ \"newPost\" }\r\n                    validate={ [ required, currentMaxLength ] }   //всі функції які валідують\r\n                    placeholder='Post message'\r\n            />\r\n            <div>\r\n                <button>Add Post</button>\r\n                <button>Remove Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst MyNewPostReduxForm = reduxForm({form: \"post\"})(MyNewPostForm);\r\n\r\nexport default MyNewPostReduxForm;","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport m from './MyPosts.module.css';\r\nimport MyNewPostReduxForm from './MyNewPostReduxForm';\r\n\r\n\r\nconst MyPosts = (props) => {\r\n\r\n    // shouldComponentUpdate(nextProps, nextState) { // те саме що і PureComponent (аби це була класова компонента)\r\n    //     return nextProps !== this.props\r\n    // } //а для функцыональної використовуєм memo\r\n    \r\n        let postsElements = props.profilePage.posts.map(p => <Post message={p.message} key={p.id} likesCount= {p.likesCount}/>); // з кожним елементом масиву створили компоненту\r\n        \r\n        const onAddPost = (values) => {\r\n            props.addPost(values.newPost)\r\n        };\r\n\r\n        // console.log(\"RENDER\")\r\n        return (\r\n            <div className={m.postsBlock}>\r\n                <MyNewPostReduxForm onSubmit={ onAddPost } />\r\n                <div className={m.posts}>\r\n                    { postsElements }\r\n                </div>\r\n            </div>\r\n        )\r\n    \r\n};\r\n\r\n\r\nexport default React.memo(MyPosts)\r\n","import MyPosts from './MyPosts';\r\nimport { addPostCreator} from '../../../redux/profile-reducer';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPost) => {\r\n            dispatch( addPostCreator(newPost) )\r\n        }\r\n        // updateNewPostText: (text) => {\r\n        //     let action = updateNewPostTextCreator(text);\r\n        //     dispatch( action )\r\n        // }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport p from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div className={p.content}>\r\n            <ProfileInfo profile={ props.profile } \r\n                status={ props.status } \r\n                updateUserStatus = { props.updateUserStatus }\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport { getUserProfile, getUserStatus, updateUserStatus, savePhoto } from '../../redux/profile-reducer';\r\nimport wiAuthRedirect from '../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { withRouter } from '../hoc/withRouter';\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile () {\r\n        let userId = this.props.params.userId;\r\n        if (userId == null) {\r\n            userId = this.props.authorizedUserId; //мій авторизований профіль профіль\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\") //якщо нам не прийде інформація по буде профілю то редірект на логін сторінку\r\n            }\r\n        }\r\n\r\n        this.props.getUserProfile(userId) //кріейтор санки\r\n        this.props.getUserStatus(userId)\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    };\r\n\r\n    componentDidUpdate (prevProps, prevState) {\r\n        if (this.props.params.userId !== prevProps.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Profile {...this.props} \r\n                profile={this.props.profile} \r\n                status={this.props.status} \r\n                updateUserStatus = { this.props.updateUserStatus }\r\n                isOwner = {!this.props.params.userId}\r\n                savePhoto =  { this.props.savePhoto }\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getUserStatus, updateUserStatus, savePhoto}),\r\n    withRouter,\r\n    wiAuthRedirect // HOC якщо не залогынений то редырект на вкладку login\r\n)(ProfileContainer);\r\n","import React from \"react\";\r\nimport { Navigate } from \"react-router\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nconst wiAuthRedirect = (Component) => { // HOC компонента вищого порядку для редіректа\r\n\r\n    class RedirectComponent extends React.Component {\r\n\r\n        render () {\r\n            if (!this.props.isAuth) return <Navigate to=\"/login\"/>//якщо не залогынений то редырект на вкладку login\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent); // для то щоб this.props.isAuth прокинути в цю компоненту\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\nexport default wiAuthRedirect;"],"names":["props","useState","editMode","setEditMode","status","currentStatus","setStatus","useEffect","autoFocus","onBlur","updateUserStatus","value","onChange","event","currentTarget","className","pi","onDoubleClick","_ref","profile","isOwner","savePhoto","_jsx","children","_jsxs","src","photos","large","userPhoto","alt","type","target","files","length","fullName","ProfileStatusWithHooks","aboutMe","Preloader","p","message","likesCount","currentMaxLength","maxLength","reduxForm","form","onSubmit","handleSubmit","m","Field","component","Textarea","name","validate","required","placeholder","MyPosts","postsElements","profilePage","posts","map","Post","id","MyNewPostReduxForm","values","addPost","newPost","React","connect","state","dispatch","addPostCreator","ProfileInfo","MyPostsContainer","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","userId","this","params","authorizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","Profile","_objectSpread","compose","auth","isAuth","withRouter","wiAuthRedirect","mapStateToPropsForRedirect","Component","RedirectComponent","to"],"sourceRoot":""}