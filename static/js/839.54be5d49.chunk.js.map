{"version":3,"file":"static/js/839.54be5d49.chunk.js","mappings":"wKACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAgH,+BCAhH,EAAyB,2B,mBCgBzB,EAbmB,SAACA,GAChB,IAAMC,EAAO,YAAcD,EAAME,GAC3BC,EAAMH,EAAMI,KAAO,UAEzB,OACI,iBAAKC,UAAWC,EAAU,WACtB,gBAAKC,IAAKP,EAAMQ,OAAQL,IAAMA,KAC9B,SAAC,KAAO,CAACM,GAAIR,EAAK,SAAED,EAAMI,SAGtC,ECbA,GAAiB,ECSjB,EAPgB,SAACJ,GACb,OACI,gBAAKK,UAAWK,EAAAA,QAAU,SAAEV,EAAMW,SAE1C,E,uCCFMC,GAAcC,EAAAA,EAAAA,IAAU,IAsB9B,GAFkCC,EAAAA,EAAAA,GAAU,CAACC,KAAM,UAAjBD,EAlBL,SAACd,GAE1B,OACI,kBAAMgB,SAAWhB,EAAMiB,aAAc,WACjC,0BACI,SAACC,EAAA,EAAK,CAACC,UAAYC,EAAAA,GACfhB,KAAO,aACPiB,SAAW,CAAEC,EAAAA,GAAUV,GACvBW,YAAY,mBAGpB,0BACI,iDAIhB,ICIA,EArBgB,SAACvB,GACb,IAAMwB,EAAkBxB,EAAMyB,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAU,CAAC1B,GAAI0B,EAAE1B,GAAIE,KAAMwB,EAAExB,KAAMI,OAAQoB,EAAEpB,QAAaoB,EAAE1B,GAAK,IACvH2B,EAAmB7B,EAAMyB,YAAYK,SAASH,KAAI,SAAAjB,GAAC,OAAI,SAAC,EAAO,CAACC,QAASD,EAAEC,SAAcD,EAAER,GAAK,IAMtG,OACI,iBAAKG,UAAWuB,EAAU,WACtB,gBAAKvB,UAAWuB,EAAe,SACzBJ,KAEN,iBAAKnB,UAAWuB,EAAgB,UAC1BC,GACF,SAAC,EAAyB,CAACb,SAXZ,SAACe,GACxB/B,EAAMgC,YAAYD,EAAOE,WAC7B,SAaJ,E,oBCAA,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KApBoB,SAACC,GACrB,MAAO,CACHX,YAAaW,EAAMX,YACnBY,OAAQD,EAAME,KAAKD,OAE3B,IAE2B,SAACE,GACxB,MAAO,CACHP,YAAa,SAACC,GACVM,GAAUC,EAAAA,EAAAA,GAAmBP,GACjC,EAKR,IAKIQ,EAAAA,EAFJ,CAGEC,E,kHCxBIC,EAA6B,SAACP,GAChC,MAAO,CACHC,OAAQD,EAAME,KAAKD,OAE3B,EAiBA,IAfuB,SAACO,GAAgB,IAE9BC,EAAiB,qGAKlB,OALkB,8BAEnB,WACI,OAAKC,KAAK9C,MAAMqC,QACT,SAACO,GAAS,UAAKE,KAAK9C,SADI,SAAC,KAAQ,CAACS,GAAG,UAEhD,KAAC,EALkB,CAASsC,EAAAA,WAUhC,OAFqCZ,EAAAA,EAAAA,IAAQQ,EAARR,CAAoCU,EAG7E,C","sources":["webpack://1-project/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://1-project/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.module.css","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogAddMessageReduxForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","components/hoc/withAuthRedirect.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__iXlGP\",\"dialogsItems\":\"Dialogs_dialogsItems__19VYj\",\"messagesItems\":\"Dialogs_messagesItems__2QhQp\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"DialogItem_dialog__LaM1t\"};","import React from \"react\";\r\nimport di from \"./DialogItem.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    const path = \"/dialogs/\" + props.id;\r\n    const alt = props.name + \" avatar\"\r\n\r\n    return (\r\n        <div className={di.dialog}>\r\n            <img src={props.avatar} alt={ alt } />\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","// extracted by mini-css-extract-plugin\nexport default {};","import React from \"react\";\r\nimport m from \"./Message.module.css\"\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={m.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message;","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Textarea } from \"../common/FormControls/FormControls\";\r\nimport { maxLength, required } from \"../../utils/validators/validators\";\r\n\r\nconst maxLength50 = maxLength(50);\r\n\r\nconst DialogAddMessageForm = (props) => {//винести в окремий файл\r\n\r\n    return (\r\n        <form onSubmit={ props.handleSubmit }>\r\n            <div>\r\n                <Field component={ Textarea } \r\n                    name={ \"newMessage\" } \r\n                    validate={ [ required, maxLength50 ] }\r\n                    placeholder=\"New message\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send Message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst DialogAddMessageReduxForm = reduxForm({form: \"dialog\"})(DialogAddMessageForm);\r\n\r\nexport default DialogAddMessageReduxForm;","import React from \"react\";\r\nimport d from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport DialogAddMessageReduxForm from \"./DialogAddMessageReduxForm\";\r\n\r\nconst Dialogs = (props) => {\r\n    const dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem id={d.id} name={d.name} avatar={d.avatar} key={d.id}/>); // створюємо масив тегів\r\n    const messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id}/>);\r\n\r\n    const onSendMessageClick = (values) => {\r\n        props.sendMessage(values.newMessage)\r\n    }\r\n\r\n    return (\r\n        <div className={d.dialogs}>\r\n            <div className={d.dialogsItems}>\r\n                { dialogsElements }\r\n            </div>\r\n            <div className={d.messagesItems}>\r\n                { messagesElements }\r\n                <DialogAddMessageReduxForm onSubmit={ onSendMessageClick } />\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dialogs;","import { sendMessageCreator } from '../../redux/dialogs-reducer';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from 'react-redux';\r\nimport wiAuthRedirect from '../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth //для редіректа, якщо не залогінений користувач\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessage) => {\r\n            dispatch( sendMessageCreator(newMessage) )\r\n        }\r\n        // updateNewMessageBody: (body) => { //використовували раніше, щоб оновлювати стейт коли друкуємо меседж\r\n        //     dispatch( updateNewMessageBodyCreator( body ) )\r\n        // }\r\n    }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps), //прокидує дані із стейта та колбеки\r\n    wiAuthRedirect // HOC якщо не залогынений то редырект на вкладку login\r\n)(Dialogs);","import React from \"react\";\r\nimport { Navigate } from \"react-router\";\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nconst wiAuthRedirect = (Component) => { // HOC компонента вищого порядку для редіректа\r\n\r\n    class RedirectComponent extends React.Component {\r\n\r\n        render () {\r\n            if (!this.props.isAuth) return <Navigate to=\"/login\"/>//якщо не залогынений то редырект на вкладку login\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent); // для то щоб this.props.isAuth прокинути в цю компоненту\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}\r\n\r\nexport default wiAuthRedirect;"],"names":["props","path","id","alt","name","className","di","src","avatar","to","m","message","maxLength50","maxLength","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","messages","values","sendMessage","newMessage","compose","connect","state","isAuth","auth","dispatch","sendMessageCreator","wiAuthRedirect","Dialogs","mapStateToPropsForRedirect","Component","RedirectComponent","this","React"],"sourceRoot":""}